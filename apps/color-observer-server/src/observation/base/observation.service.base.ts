/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Observation as PrismaObservation } from "@prisma/client";
import { ObservationCreateInput } from "./ObservationCreateInput";
import { Observation } from "./Observation";

export class ObservationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ObservationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.observation.count(args);
  }

  async observations<T extends Prisma.ObservationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ObservationFindManyArgs>
  ): Promise<PrismaObservation[]> {
    return this.prisma.observation.findMany<Prisma.ObservationFindManyArgs>(
      args
    );
  }
  async observation<T extends Prisma.ObservationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ObservationFindUniqueArgs>
  ): Promise<PrismaObservation | null> {
    return this.prisma.observation.findUnique(args);
  }
  async createObservation<T extends Prisma.ObservationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ObservationCreateArgs>
  ): Promise<PrismaObservation> {
    return this.prisma.observation.create<T>(args);
  }
  async updateObservation<T extends Prisma.ObservationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ObservationUpdateArgs>
  ): Promise<PrismaObservation> {
    return this.prisma.observation.update<T>(args);
  }
  async deleteObservation<T extends Prisma.ObservationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ObservationDeleteArgs>
  ): Promise<PrismaObservation> {
    return this.prisma.observation.delete(args);
  }
  async CreateExactColorObservation(
    args: ObservationCreateInput
  ): Promise<Observation> {
    throw new Error("Not implemented");
  }
  async CreateObservation(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
