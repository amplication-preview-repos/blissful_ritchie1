/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ObservationService } from "../observation.service";
import { ObservationCreateInput } from "./ObservationCreateInput";
import { Observation } from "./Observation";
import { ObservationFindManyArgs } from "./ObservationFindManyArgs";
import { ObservationWhereUniqueInput } from "./ObservationWhereUniqueInput";
import { ObservationUpdateInput } from "./ObservationUpdateInput";

export class ObservationControllerBase {
  constructor(protected readonly service: ObservationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Observation })
  async createObservation(
    @common.Body() data: ObservationCreateInput
  ): Promise<Observation> {
    return await this.service.createObservation({
      data: data,
      select: {
        colorAfter: true,
        colorBefore: true,
        createdAt: true,
        id: true,
        objectId: true,
        result: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Observation] })
  @ApiNestedQuery(ObservationFindManyArgs)
  async observations(@common.Req() request: Request): Promise<Observation[]> {
    const args = plainToClass(ObservationFindManyArgs, request.query);
    return this.service.observations({
      ...args,
      select: {
        colorAfter: true,
        colorBefore: true,
        createdAt: true,
        id: true,
        objectId: true,
        result: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Observation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async observation(
    @common.Param() params: ObservationWhereUniqueInput
  ): Promise<Observation | null> {
    const result = await this.service.observation({
      where: params,
      select: {
        colorAfter: true,
        colorBefore: true,
        createdAt: true,
        id: true,
        objectId: true,
        result: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Observation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateObservation(
    @common.Param() params: ObservationWhereUniqueInput,
    @common.Body() data: ObservationUpdateInput
  ): Promise<Observation | null> {
    try {
      return await this.service.updateObservation({
        where: params,
        data: data,
        select: {
          colorAfter: true,
          colorBefore: true,
          createdAt: true,
          id: true,
          objectId: true,
          result: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Observation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteObservation(
    @common.Param() params: ObservationWhereUniqueInput
  ): Promise<Observation | null> {
    try {
      return await this.service.deleteObservation({
        where: params,
        select: {
          colorAfter: true,
          colorBefore: true,
          createdAt: true,
          id: true,
          objectId: true,
          result: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/observations/exact-color")
  @swagger.ApiOkResponse({
    type: Observation,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateExactColorObservation(
    @common.Body()
    body: string
  ): Promise<Observation> {
    return this.service.CreateExactColorObservation(body);
  }

  @common.Get("/:id/create-observation")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateObservation(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.CreateObservation(body);
  }
}
