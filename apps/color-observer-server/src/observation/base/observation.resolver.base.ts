/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Observation } from "./Observation";
import { ObservationCountArgs } from "./ObservationCountArgs";
import { ObservationFindManyArgs } from "./ObservationFindManyArgs";
import { ObservationFindUniqueArgs } from "./ObservationFindUniqueArgs";
import { CreateObservationArgs } from "./CreateObservationArgs";
import { UpdateObservationArgs } from "./UpdateObservationArgs";
import { DeleteObservationArgs } from "./DeleteObservationArgs";
import { ObservationCreateInput } from "./ObservationCreateInput";
import { ObservationService } from "../observation.service";
@graphql.Resolver(() => Observation)
export class ObservationResolverBase {
  constructor(protected readonly service: ObservationService) {}

  async _observationsMeta(
    @graphql.Args() args: ObservationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Observation])
  async observations(
    @graphql.Args() args: ObservationFindManyArgs
  ): Promise<Observation[]> {
    return this.service.observations(args);
  }

  @graphql.Query(() => Observation, { nullable: true })
  async observation(
    @graphql.Args() args: ObservationFindUniqueArgs
  ): Promise<Observation | null> {
    const result = await this.service.observation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Observation)
  async createObservation(
    @graphql.Args() args: CreateObservationArgs
  ): Promise<Observation> {
    return await this.service.createObservation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Observation)
  async updateObservation(
    @graphql.Args() args: UpdateObservationArgs
  ): Promise<Observation | null> {
    try {
      return await this.service.updateObservation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Observation)
  async deleteObservation(
    @graphql.Args() args: DeleteObservationArgs
  ): Promise<Observation | null> {
    try {
      return await this.service.deleteObservation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Observation)
  async CreateExactColorObservation(
    @graphql.Args()
    args: ObservationCreateInput
  ): Promise<Observation> {
    return this.service.CreateExactColorObservation(args);
  }

  @graphql.Query(() => String)
  async CreateObservation(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.CreateObservation(args);
  }
}
